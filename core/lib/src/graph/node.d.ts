/// <reference types="node" />
import { DependenciesGraph } from './dependencies-graph';
import { TranspilingStatus, TypeCheckStatus } from './enums/compilation.status';
import { ChildProcess } from 'child_process';
import { Observable } from 'rxjs';
import { RecompilationScheduler } from '../scheduler';
import { IPCSocketsManager } from '../ipc/socket';
import { Project, Workspace } from '@yarnpkg/core';
export declare abstract class Node {
    protected readonly name: string;
    protected readonly location: string;
    protected readonly graph: DependenciesGraph;
    protected readonly dependencies: Node[];
    private readonly version;
    private readonly private;
    protected transpilingStatus: TranspilingStatus;
    protected transpilingPromise: Promise<void>;
    protected typeCheckStatus: TypeCheckStatus;
    protected typeCheckProcess: ChildProcess;
    private _typeCheckLogs;
    private _checksums;
    private _lastTypeCheck;
    private nodeStatus;
    protected _ipc: IPCSocketsManager;
    protected _scheduler: RecompilationScheduler;
    private _watchers;
    private _tscLogs$;
    private _typeCheck$;
    private _transpiled$;
    typeCheck$: Observable<TypeCheckStatus>;
    transpiled$: Observable<TranspilingStatus>;
    tscLogs$: Observable<string>;
    constructor(scheduler: RecompilationScheduler, graph: DependenciesGraph, node: Workspace, nodes: Set<Node>, project: Project);
    get tscLogs(): string[];
    get lastTypeCheck(): string;
    enable(): void;
    disable(): void;
    registerIPCServer(sockets: IPCSocketsManager): void;
    isEnabled(): boolean;
    isService(): boolean;
    getTranspilingStatus(): TranspilingStatus;
    getTypeCheckStatus(): TypeCheckStatus;
    getChildren(): Node[];
    getGraph(): DependenciesGraph;
    getVersion(): string;
    getChild(name: string): Node;
    setTranspilingStatus(status: TranspilingStatus): void;
    setTypeCheckingStatus(status: TypeCheckStatus): void;
    isRoot(): boolean;
    getName(): string;
    getLocation(): string;
    getDependencies(): Node[];
    private _getDependencies;
    getDependent(): Node[];
    getParents(): Node[];
    transpile(): Observable<Node>;
    performTypeChecking(force?: boolean): Observable<Node>;
    private _startTranspiling;
    private _startTypeChecking;
    private _handleTscLogs;
    private _watchTypeChecking;
    watch(): void;
    protected unwatch(): void;
}
